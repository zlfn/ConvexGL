#version 460 core

struct Plane
{
    double a;
    double b;
    double c;
    double k;
};

struct Vertex
{
    double x;
    double y;
    double z;
};

layout (local_size_x = 1) in;

layout (binding = 0) coherent buffer Vertices {
    Vertex vertices[gl_WorkGroupSize.x];
};

layout (binding = 1) coherent buffer Planes {
    Plane planes[gl_WorkGroupSize.y];
};

layout (binding = 2) coherent buffer Output {
    double outs[gl_WorkGroupSize.y * gl_WorkGroupSize.x];
};

void main() {
    uint idx = gl_GlobalInvocationID.x;
    uint idy = gl_GlobalInvocationID.y;
    uint w = gl_NumWorkGroups.x;
    Vertex v = vertices[idx];
    Plane p = planes[idy];

    outs[idy * w + idx] =  (v.x * p.a + v.y * p.b + v.z * p.c + p.k) / sqrt(p.a*p.a + p.b*p.b + p.c*p.c);
}